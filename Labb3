import java.util.*;

import static java.lang.Double.NaN;
import static java.lang.Math.pow;
import static java.lang.System.out;


/*
 *  A calculator for rather simple arithmetic expressions
 *
 *  This is not the program, it's a class declaration (with methods) in it's
 *  own file (which must be named Calculator.java)
 *
 *  To run this: Run REPL, CalculatorGUI or WebCalcServer (they all use this
 *  but looks different)
 *
 *   NOTE:
 *   - No negative numbers implemented
 */
class Calculator {

    // Here are the only allowed instance variables!
    // Error messages (more on static later)
    final static String MISSING_OPERAND = "Missing or bad operand";
    final static String DIV_BY_ZERO = "Division with 0";
    final static String MISSING_OPERATOR = "Missing operator or parenthesis";
    final static String OP_NOT_FOUND = "Operator not found";

    // Definition of operators
    final static String OPERATORS = "+-*/^";

    // Method used by all
    double eval(String expr) {
        if (expr.length() == 0) {
            return NaN;
        }
        List<String> tokens = tokenize(expr);
        List<String> postfix = infix2Postfix(tokens);
        return evalPostfix(postfix);
    }

    // ------  Evaluate RPN expression -------------------

    double evalPostfix(List<String> postfix) {
        if(!missingOperand(postfix)){
            throw new IllegalArgumentException(MISSING_OPERAND);
        }
        Deque<String> stack = new ArrayDeque<>();
        for(int i = 0; i < postfix.size(); i++){
            if(postfix.get(i).matches("\\d+")){
                stack.push(postfix.get(i));
            }
            else{
                String op = postfix.get(i);
                double d1 = Double.parseDouble(stack.pop());
                double d2 = Double.parseDouble(stack.pop());
                double result = applyOperator(op,d1,d2);
                stack.push(Double.toString(result));
            }
        }
        return Double.parseDouble(stack.peek());
    }

    boolean missingOperand(List<String> postfix){
        int amountOfNumbers = 0;
        int amountOfOperators = 0;
        for(int i = 0; i < postfix.size(); i++){
            if(postfix.get(i).matches("\\d+")){
                amountOfNumbers++;
            }
            else{
                amountOfOperators++;
            }
        }
        if(amountOfOperators != (amountOfNumbers-1)){
            return true;
        }
        else{
            return false;   
        }
    }

    double applyOperator(String op, double d1, double d2) {
        switch (op) {
            case "+":
                return d1 + d2;
            case "-":
                return d2 - d1;
            case "*":
                return d1 * d2;
            case "/":
                if (d1 == 0) {
                    throw new IllegalArgumentException(DIV_BY_ZERO);
                }
                return d2 / d1;
            case "^":
                return pow(d2, d1);
        }
        throw new RuntimeException(OP_NOT_FOUND);
    }

    // ------- Infix 2 Postfix ------------------------

    List<String> infix2Postfix(List<String> infix) {
        // TODO
        Deque<String> stack = new ArrayDeque<>();
        List<String> postfix = new ArrayList<>();
        for (int i = 0; i < infix.size(); i++) {
            if(infix.get(i).matches("\\d+")) {
                postfix.add(infix.get(i));
            }
            else if (isOpeningParen(infix.get(i))) {
                stack.push(infix.get(i));
            }
            else if (isClosingParen(infix.get(i))) {
                while (!stack.isEmpty() && !stack.peek().equals("(")) {
                    postfix.add(stack.pop());
                }
                stack.pop();
            }
            else if (stack.isEmpty()) {
                stack.push(infix.get(i));
            }
            else if (!stack.peek().equals("(") && (getPrecedence(stack.peek()) > getPrecedence(infix.get(i)))) {
                while(!stack.isEmpty() && (getPrecedence(stack.peek()) > getPrecedence(infix.get(i)))){
                    postfix.add(stack.pop());
                }
                stack.push(infix.get(i));
            }
            else if (!stack.peek().equals("(") && (getPrecedence(stack.peek()) < getPrecedence(infix.get(i)))) {
                stack.push(infix.get(i));
            }
            else if (!stack.peek().equals("(") && (getAssociativity(infix.get(i)) == Assoc.LEFT)) {
                postfix.add(stack.pop());
                stack.push(infix.get(i));
            }
            else if (!stack.peek().equals("(") && (getAssociativity(infix.get(i)) == Assoc.RIGHT)) {
                stack.push(infix.get(i));
            }
            else{
                stack.push(infix.get(i));
            }
        }
        while (!stack.isEmpty()) {
            postfix.add(stack.pop());
        }
        return postfix;
    }

    // TODO More methods
    boolean isOpeningParen(String ch){
        return "(".indexOf(ch) >= 0;
    }
    boolean isClosingParen(String ch){
        return ")".indexOf(ch) >= 0;
    }

    int getPrecedence(String op) {
        if ("+-".contains(op)) {
            return 2;
        } else if ("*/".contains(op)) {
            return 3;
        } else if ("^".contains(op)) {
            return 4;
        } else {
            throw new RuntimeException(OP_NOT_FOUND);
        }
    }

    Assoc getAssociativity(String op) {
        if ("+-*/".contains(op)) {
            return Assoc.LEFT;
        } else if ("^".contains(op)) {
            return Assoc.RIGHT;
        } else {
            throw new RuntimeException(OP_NOT_FOUND);
        }
    }

    enum Assoc {
        LEFT,
        RIGHT
    }

    // ---------- Tokenize -----------------------

    // List String (not char) because numbers (with many chars)
    List<String> tokenize(String expr) {
        List<String> list = new ArrayList<>();
        String str;
        for (int i = 0; i < expr.length(); i++) {
            boolean a = (Character.toString(expr.charAt(i)).contains(Character.toString(OPERATORS.charAt(0))));
            boolean b = (Character.toString(expr.charAt(i)).contains(Character.toString(OPERATORS.charAt(1))));
            boolean c = (Character.toString(expr.charAt(i)).contains(Character.toString(OPERATORS.charAt(2))));
            boolean d = (Character.toString(expr.charAt(i)).contains(Character.toString(OPERATORS.charAt(3))));
            boolean e = (Character.toString(expr.charAt(i)).contains(Character.toString(OPERATORS.charAt(4))));
            boolean f = (Character.toString(expr.charAt(i)).contains("("));
            boolean g = (Character.toString(expr.charAt(i)).contains(")"));

            if (Character.isDigit(expr.charAt(i))) {
                str = getNumber(expr, i);
                i = i + str.length()-1;
                list.add(str);
            }
            else if (a || b || c || d || e || f || g) {
                str = Character.toString(expr.charAt(i));
                list.add(str);
            }
        }
        return list;
    }

    String getNumber(String r, int startIndex) {
        StringBuilder sb = new StringBuilder();
        for (int i = startIndex; i < r.length(); i++) {
            if (Character.isDigit(r.charAt(i))) {
                sb.append(r.charAt(i));
            }
            else break;
        }
        return sb.toString();
    }
}
