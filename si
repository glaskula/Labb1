package spaceinv.model;


import spaceinv.event.EventBus;
import spaceinv.event.ModelEvent;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/*
 *  SI (Space Invader) class representing the overall
 *  data and logic of the game
 *  (nothing about the look/rendering here)
 */
public class SI {

    // Default values (not to use directly). Make program adaptable
    // by letting other programmers set values if they wish.
    // If not, set default values (as a service)
    public static final int GAME_WIDTH = 500;
    public static final int GAME_HEIGHT = 500;
    public static final int LEFT_LIMIT = 50;
    public static final int RIGHT_LIMIT = 450;
    public static final int SHIP_WIDTH = 20;
    public static final int SHIP_HEIGHT = 20;
    public static final int SHIP_MAX_DX = 3;
    public static final int SHIP_MAX_DY = 0;
    public static final int GUN_WIDTH = 20;
    public static final int GUN_HEIGHT = 20;
    public static final double GUN_MAX_DX = 10;
    public static final double PROJECTILE_WIDTH = 5;
    public static final double PROJECTILE_HEIGHT = 5;
    public static final int GROUND_HEIGHT = 20;
    public static final int OUTER_SPACE_HEIGHT = 10;

    public static final long ONE_SEC = 1_000_000_000;
    public static final long HALF_SEC = 500_000_000;
    public static final long TENTH_SEC = 100_000_000;

    private static final Random rand = new Random();

    // TODO More references here
    private final Gun gun;

    private List<Positionable> ps = new ArrayList<>();
    private List<Projectile> shipBombs;
    private Projectile gunProjectile;
    private List<AbstractSpaceship> ships;

    private int points;

    // TODO Constructor here


    // Timing. All timing handled here!
    private long lastTimeForMove;
    private long lastTimeForFire;
    private int shipToMove = 0;

    public SI(Gun gun, Projectile gunProjectile, List ships, List shipBombs) {
        this.gun = gun;
        this.gunProjectile = gunProjectile;
        this.ships = ships;
        this.shipBombs = shipBombs;
    }

    // ------ Game loop (called by timer) -----------------
    public void update(long now) {
        if( ships.size() == 0){
            EventBus.INSTANCE.publish(new ModelEvent(ModelEvent.Type.HAS_WON));
        }

        //     Movement
        moveGun(gun.getDx());
        gunProjectile.move();
        for (int i = 0; i < shipBombs.size(); i++){
            shipBombs.get(i).move();
        }

        if (OuterSpace.hasleft(gunProjectile)) {
            ps.remove(gunProjectile);
        }

        for (int i = 0; i < ships.size(); i++){
            if (shipHitRightLimit(i) || shipHitLeftLimit(i)) {
                AbstractSpaceship.turn(ships);
            }
        }
        for(int i = 0; i < ships.size(); i++ ){
            ships.get(i).moveShips(ships, shipBombs);
        }

        //    Ships fire
            for (int i = 0; i < ships.size(); i++) {
                ships.get(i).fire();
               // shipBombs.get(i).setDy(-1);

                if (Ground.hitGround(shipBombs.get(i))) {
                    shipBombs.get(i).setDy(0);
                }
        }
        //    Collisions



    }

    private boolean shipHitRightLimit(int i) {
        if(ships.get(i).getX() > RIGHT_LIMIT-(SHIP_WIDTH/2)){
            return true;
        }
        return false;
    }

    private boolean shipHitLeftLimit(int i) {
        if(ships.get(i).getX() < LEFT_LIMIT){
            return true;
        }
        return false;
    }


    // ---------- Interaction with GUI  -------------------------

    public void fireGun() {
        if(gunProjectile.getY() < OUTER_SPACE_HEIGHT) {
            gunProjectile = gun.fire();
            ps.add(gunProjectile);
        }
        else if(gunProjectile.getDy() == 0){
            gunProjectile = gun.fire();
            ps.add(gunProjectile);
        }
    }

    public void moveGun(double dx){
        gun.setX(dx + gun.getX());
    }


    public List<Positionable> getPositionable() {
        ps.add(gun);
        ps.addAll(ships);
        ps.addAll(shipBombs);
        return ps;
    }

    public int getPoints() {
        return points;
    }


}
